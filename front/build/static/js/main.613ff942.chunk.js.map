{"version":3,"sources":["Navbar.tsx","Model.ts","ApiClient.ts","Config.ts","VisGraphWrapper.tsx","CytoscapeGraph.tsx","GraphComponent.tsx","App.tsx","index.tsx"],"names":["Navbar","className","role","aria-label","href","GraphType","extractData","response","data","graphConfig","options","physics","enabled","repulsion","nodeDistance","layout","improvedLayout","edges","color","height","VisGraphWrapper","props","events","select","event","preventDefault","length","split","from","to","onLinkClick","key","JSON","stringify","graph","nodes","map","it","id","label","title","links","source","target","LayoutType","styles","selector","style","CytoscapeGraph","useState","GRID","state","setState","container","React","convertedData","a","group","b","concat","mapToCytoscapeGrapData","current","stop","remove","add","elements","makeLayout","name","spacingFactor","run","cytoscape","use","cola","maxZoom","wheelSensitivity","off","on","edge","_private","value","onChange","e","s","updateLayout","Object","values","val","ref","GraphComponent","graphType","CYTOSCAPE","VIS","D3","config","onClickLink","border","borderWidth","borderStyle","App","cycles","graphData","description","show_only_new_cycles","useEffect","Axios","get","then","_","showOnlyNewCycles","constructGraphDataFromPackages","packages","flatMap","p","uses","cycleClicked","cycleIndex","cycleId","showCompleteGraphClicked","type","checked","onClick","filter","new_cycle","promises","undefined","find","Promise","all","imports","marginLeft","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.613ff942.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Navbar() {\n    return (\n        <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"/#\">\n                    Cycle-hunter 9000\n                </a>\n            </div>\n        </nav>\n    );\n}","export interface ImportInfo {\n    from: string,\n    to: string,\n    imports: Array<string>\n}\n\nexport interface Package {\n    name: string,\n    uses: Array<string>\n}\n\nexport interface Cycle {\n    packages: Array<string>,\n    new_cycle: boolean,\n    id: number\n}\n\nexport type CycleList = Array<Cycle>;\n\nexport interface GraphData {\n    nodes: Array<{ id: string }>,\n    links: Array<{ source: string, target: string }>\n}\n\nexport enum GraphType {\n    D3 = \"D3\",\n    CYTOSCAPE = \"Cytoscape\",\n    VIS = \"Vis.js\",\n}\n","import Axios, {AxiosResponse} from \"axios\";\nimport {CycleList, ImportInfo, Package} from \"./Model\";\n\nfunction extractData<T>(response: AxiosResponse<T>): T {\n    return response.data;\n}\n\nexport function getCycleList(): Promise<CycleList> {\n    return Axios.get<CycleList>(\"/cycles\").then(extractData);\n}\n\nexport function getGraphForCycle(cycleId: number): Promise<Array<Package>> {\n    return Axios.get<Array<Package>>(`/cycle/${cycleId}`).then(extractData);\n}\n\nexport function getImportsFromTo(from: string, to: string): Promise<ImportInfo> {\n    return Axios.get<ImportInfo>(`/imports/${from}/${to}`).then(extractData);\n}\n\nexport function getCompleteGraph(): Promise<Array<Package>> {\n    return Axios.get<Array<Package>>(\"/graph\").then(extractData);\n}\n\n","export const graphConfig = {\n    \"automaticRearrangeAfterDropNode\": true,\n    \"collapsible\": true,\n    \"directed\": true,\n    \"focusAnimationDuration\": 0,\n    \"focusZoom\": 1,\n    \"height\": 800,\n    \"highlightDegree\": 2,\n    \"highlightOpacity\": 1,\n    \"linkHighlightBehavior\": true,\n    \"maxZoom\": 8,\n    \"minZoom\": 0.1,\n    \"nodeHighlightBehavior\": true,\n    \"panAndZoom\": false,\n    \"staticGraph\": false,\n    \"staticGraphWithDragAndDrop\": false,\n    \"width\": 1500,\n    \"d3\": {\n        \"alphaTarget\": 0.05,\n        \"gravity\": -200,\n        \"linkLength\": 300,\n        \"linkStrength\": 1,\n        \"disableLinkForce\": false\n    },\n    \"node\": {\n        \"color\": \"grey\",\n        \"fontColor\": \"black\",\n        \"fontSize\": 15,\n        \"fontWeight\": \"normal\",\n        \"highlightColor\": \"orange\",\n        \"highlightFontSize\": 8,\n        \"highlightFontWeight\": \"normal\",\n        \"highlightStrokeColor\": \"SAME\",\n        \"highlightStrokeWidth\": \"SAME\",\n        \"labelProperty\": \"id\",\n        \"mouseCursor\": \"pointer\",\n        \"opacity\": 1,\n        \"renderLabel\": true,\n        \"size\": 100,\n        \"strokeColor\": \"none\",\n        \"strokeWidth\": 1.5,\n        \"svg\": \"\",\n        \"symbolType\": \"circle\"\n    },\n    \"link\": {\n        \"color\": \"#d3d3d3\",\n        \"fontColor\": \"black\",\n        \"fontSize\": 8,\n        \"fontWeight\": \"normal\",\n        \"highlightColor\": \"black\",\n        \"highlightFontSize\": 8,\n        \"highlightFontWeight\": \"normal\",\n        \"labelProperty\": \"label\",\n        \"mouseCursor\": \"pointer\",\n        \"opacity\": 1,\n        \"renderLabel\": false,\n        \"semanticStrokeWidth\": false,\n        \"strokeWidth\": 2,\n        \"markerHeight\": 3,\n        \"markerWidth\": 3\n    }\n}\n","import VisGraph from \"react-graph-vis\";\nimport React from \"react\";\nimport {GraphData} from \"./Model\";\n\nconst options = {\n    physics: {\n        enabled: false,\n        repulsion: {\n            nodeDistance: 500\n        }\n    },\n    layout: {\n        improvedLayout: true,\n    },\n    edges: {\n        color: \"#000000\"\n    },\n    height: \"500px\"\n};\n\n\ntype VisGraphData = {\n    nodes: Array<{ id: string, label: string, title: string }>,\n    edges: Array<{ id: string, from: string, to: string }>\n}\n\nfunction mapToVisGraphData(data: GraphData): VisGraphData {\n    return {\n        nodes: data.nodes.map(it => ({id: it.id, label: it.id, title: it.id})),\n        edges: data.links.map(it => ({id: `${it.source};${it.target}`, from: it.source, to: it.target}))\n    }\n}\n\nexport default function VisGraphWrapper(props: {\n    data: GraphData,\n    onLinkClick: (from: string, to: string) => void\n}) {\n    const events = {\n        select: function (event: { nodes: Array<string>, edges: Array<String>, event: any }) {\n            event.event.preventDefault();\n            if (event.edges.length === 1) {\n                let [from, to] = event.edges[0].split(\";\");\n                props.onLinkClick(from, to);\n            }\n        }\n    };\n    return (<VisGraph\n        key={JSON.stringify(props.data)}\n        graph={mapToVisGraphData(props.data)}\n        options={options}\n        events={events}\n    />)\n}","import * as React from \"react\";\nimport {useState} from \"react\";\nimport cytoscape, {ElementDefinition, ElementGroup} from \"cytoscape\";\nimport cola from \"cytoscape-cola\";\n\nimport {GraphData} from \"./Model\";\n\n\nconst styles = [\n    {\n        selector: \"node\",\n        style: {\n            \"transition-duration\": \"0.3s\",\n            \"label\": \"data(id)\",\n            \"font-weight\": \"bold\",\n            \"transition-timing-function\": \"ease-in-sine\",\n            \"background-color\": \"orange\"\n        }\n    },\n    {\n        selector: \"edge\",\n        style: {\n            \"curve-style\": \"bezier\",\n            \"target-arrow-shape\": \"triangle\",\n            \"target-arrow-color\": \"purple\",\n            \"line-color\": \"lightblue\"\n        }\n    }\n];\n\nfunction mapToCytoscapeGrapData(data: GraphData): ElementDefinition[] {\n    const nodes: ElementGroup = \"nodes\";\n    const edges: ElementGroup = \"edges\";\n    let a: ElementDefinition[] = data.links.map(it => ({\n        group: edges,\n        data: {id: `edge-${it.source}-${it.target}`, source: it.source, target: it.target}\n    }));\n    let b: ElementDefinition[] = data.nodes.map(it => ({group: nodes, data: it}));\n    return a.concat(b);\n}\n\nenum LayoutType {\n    GRID = \"grid\",\n    CONCENTRIC = \"concentric\",\n    CIRCLE = \"circle\"\n}\n\ninterface State {\n    layout: LayoutType\n}\n\nexport default function CytoscapeGraph(props: {\n    data: GraphData,\n    onLinkClick: (from: string, to: string) => void\n}) {\n    const [state, setState] = useState<State>({layout: LayoutType.GRID})\n    const container = React.useRef<HTMLDivElement>(null);\n    const graph = React.useRef<cytoscape.Core>();\n    const layout = React.useRef<cytoscape.Layouts>();\n    const {data, onLinkClick} = props;\n    const convertedData = mapToCytoscapeGrapData(data);\n    React.useEffect(() => {\n        if (graph.current) {\n            if (layout.current) {\n                layout.current.stop();\n            }\n            graph.current.remove('node, edge');\n            graph.current.add(convertedData);\n            layout.current = graph.current.elements().makeLayout({\n                name: state.layout,\n                spacingFactor: 2\n            });\n            layout.current.run();\n        }\n        // eslint-disable-next-line\n    }, [data, state.layout,]);\n\n    React.useEffect(() => {\n        if (!container.current) {\n            return;\n        }\n        if (!graph.current) {\n            cytoscape.use(cola);\n            // @ts-ignore\n            graph.current = cytoscape({\n                style: styles,\n                elements: convertedData,\n                maxZoom: 1,\n                wheelSensitivity: 0.2,\n                container: container.current\n            });\n        }\n        graph.current?.off(\"click\", \"edge\");\n        graph.current?.on(\"click\", \"edge\", (it: any) => {\n            let edge = it.target._private.data;\n            onLinkClick(edge.source, edge.target);\n        });\n        // eslint-disable-next-line\n    }, [data, onLinkClick]);\n\n    const updateLayout = (layout: LayoutType) => {\n        setState(s => ({...s, layout: layout}));\n    };\n\n    return (\n        <>\n            <div className=\"select\">\n                <select value={state.layout} onChange={(e) => updateLayout(e.target.value as LayoutType)}>\n                    {Object.values(LayoutType).map((val: string) => <option key={val}>{val}</option>)}\n                </select>\n            </div>\n            <div className=\"graph\" ref={container}/>\n        </>\n    );\n}\n\n","import {GraphData, GraphType} from \"./Model\";\nimport {Graph} from \"react-d3-graph\";\nimport {graphConfig} from \"./Config\";\nimport React from \"react\";\nimport VisGraphWrapper from './VisGraphWrapper';\nimport CytoscapeGraph from './CytoscapeGraph';\n\nexport interface Props {\n    graphType: GraphType,\n    data: GraphData,\n    onLinkClick: (from: string, to: string) => void\n}\n\nexport function GraphComponent(props: Props) {\n    let graph = (() => {\n        if (props.data.nodes.length === 0) {\n            return undefined\n        }\n        switch (props.graphType) {\n            case GraphType.CYTOSCAPE:\n                return <CytoscapeGraph onLinkClick={props.onLinkClick} data={props.data}/>;\n            case GraphType.VIS:\n                return <VisGraphWrapper data={props.data} onLinkClick={props.onLinkClick}/>;\n            case GraphType.D3:\n                return <Graph\n                    id=\"cycle-graph\"\n                    data={props.data}\n                    config={graphConfig}\n                    onClickLink={props.onLinkClick}/>;\n        }\n    })();\n    return (\n        <div\n            style={{border: \"black\", borderWidth: 1, borderStyle: \"dashed\"}}>\n            {graph}\n        </div>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport {Navbar} from \"./Navbar\";\nimport {getCompleteGraph, getCycleList, getGraphForCycle, getImportsFromTo} from \"./ApiClient\";\nimport {CycleList, GraphData, GraphType, ImportInfo, Package} from \"./Model\";\nimport {GraphComponent} from \"./GraphComponent\";\n\ninterface State {\n    cycles: CycleList,\n    graphData: GraphData,\n    description: Array<ImportInfo>,\n    show_only_new_cycles: boolean\n    graphType: GraphType\n}\n\nfunction App() {\n    let [state, setState] = useState<State>({\n        cycles: [],\n        graphData: {nodes: [], links: []},\n        description: [],\n        show_only_new_cycles: false,\n        graphType: GraphType.VIS\n    });\n\n    useEffect(() => {\n        getCycleList().then(_ => setState(s => ({...s, cycles: _})))\n    }, [])\n\n    const toggle_show_only_new_cycles = () => {\n        setState(s => ({...s, show_only_new_cycles: !s.show_only_new_cycles}))\n    }\n    const changeGraphType = (type: GraphType) => {\n        setState(s => ({...s, graphType: type, description: [] }))\n    }\n\n    const onClickLink = (source: string, target: string) => {\n        const pairs = state.graphData.links.find(_ => _.source === target && _.target === source) === undefined\n            ? [[source, target]]\n            : [[target, source], [source, target]];\n        const promises = pairs.map(_ => getImportsFromTo(_[0], _[1]));\n        Promise.all(promises)\n            .then(_ => setState(s =>({\n                ...s,\n                description: _.map(it => ({from: it.from, to: it.to, imports: it.imports}))\n            })));\n    };\n\n    const constructGraphDataFromPackages = (packages: Array<Package>): GraphData => {\n        return {\n            nodes: packages.map(_ => ({id: _.name})),\n            links: packages.flatMap(p => p.uses.map(_ => ({source: p.name, target: _})))\n        };\n    }\n\n    const cycleClicked = (cycleIndex: number) => {\n        getGraphForCycle(cycleIndex)\n            .then(constructGraphDataFromPackages)\n            .then(_ => setState(s => ({...s, graphData: _})))\n    }\n\n    function cycleList(cycles: CycleList, showOnlyNewCycles: boolean): JSX.Element[] {\n        return cycles\n            .filter(it => showOnlyNewCycles ? it.new_cycle : true)\n            .map((it) => <a\n                    key={it.id}\n                    href=\"/#\"\n                    className=\"list-item\"\n                    onClick={_ => cycleClicked(it.id)}>\n                    {it.packages.length} item cycle\n                </a>\n            )\n    }\n\n    const showCompleteGraphClicked = () => {\n        getCompleteGraph()\n            .then(constructGraphDataFromPackages)\n            .then(_ => setState(s=> ({...s, graphData: _})))\n    }\n\n    return (\n        <div className=\"App\">\n            <Navbar/>\n            <div className=\"\">\n                <div className=\"columns is-marginless\">\n                    <div className=\"column is-one-fifth\">\n                        <div className=\"select\" >\n                            <select value={state.graphType} onChange={(e) => changeGraphType(e.target.value as GraphType)} >\n                                {Object.values(GraphType).map((key :string) => <option key={key} >{key}</option>)}\n                            </select>\n                        </div>\n                        <div className=\"field\">\n                            <input\n                                type=\"checkbox\"\n                                checked={state.show_only_new_cycles}\n                                onChange={_ => toggle_show_only_new_cycles()}\n                            />\n                            <label>Show only new cycles</label>\n                        </div>\n                        <div className=\"list\">\n                            <a\n                                key=\"complete-graph\"\n                                href=\"/#\"\n                                className=\"list-item\"\n                                onClick={_ => showCompleteGraphClicked()}>\n                                Complete dependency graph\n                            </a>\n                            {cycleList(state.cycles, state.show_only_new_cycles)}\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <GraphComponent\n                            graphType={state.graphType}\n                            data={state.graphData}\n                            onLinkClick={onClickLink}/>\n                    </div>\n                </div>\n                <div className=\"columns\" style={{marginLeft: \"auto\"}}>\n                    {state.description.map(_ => <div key={_.from} className=\"column\">\n                        <table className=\"table\">\n                            <thead>\n                            <tr>\n                                <th className=\"has-text-centered\">{`${_.to} imports in ${_.from}`}</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {_.imports.map(i => <tr key={i} className=\"has-text-left\"><td>{i}</td></tr>)}\n                            </tbody>\n                        </table>\n                    </div>)}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}